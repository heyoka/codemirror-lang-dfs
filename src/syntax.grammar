@precedence {
  lambda @right,
  expr @right,
  function @right,
  params @right,
  node @left,
  nodeparam @left,
  duration @left,
  primaryEx @left

}

@top Script { statement+ }

@skip { space | LineComment }

statement {
  Declaration |
  expression
}

Declaration { definition "=" expression }

definition {
  DEF Identifier
}

expression {
  Node |
  !node Identifier Node |
  primaryExpr
}

primary {
    !duration Duration |
    Float |
    Int |
    String |
    Boolean |
    Identifier |
    Reference |
    Operator |
  Function |
  !lambda Lambda |
  !expr Expr
}

Parameters {
    !params primaryExpr ("," primaryExpr)* |
    "[" primaryExpr ("," primaryExpr)* "]"
}

primaryExpr {
  !primaryEx  primary !primaryEx (primary)* |
  !primaryEx "(" primary !primaryEx (primary)* ")"
}

Function {
   !function ( Identifier !function "(" ) Parameters ( ")" ) |
  !function Identifier !function "(" ")"
}

Expr {
  !expr kwExpr primaryExpr+ |
  !expr kwExpr ( "(" primaryExpr ")" )+
}

Lambda {
  !lambda kwLambda !lambda primaryExpr+ primaryExpr* |
  !lambda kwLambda ( "(" primaryExpr ")" primaryExpr* )+
}


Node {
   !node UserNode  Identifier "(" (Parameters)* ")" NodeParam*   |
    !node Macro  Identifier "(" (Parameters)* ")" NodeParam*  |
    !node kwNode !node Identifier "(" (Parameters)* ")" NodeParam*
}

NodeParam {
  Dot Identifier "(" (Parameters)* ")"
}


@tokens {

kwNode { "|" }
Macro { "||" }
UserNode { "@" }
Dot { "." }

DEF { "def" }
kwLambda { "lambda:" }
kwExpr { "e:" }

  Duration { ( "+"|"-" )? ( "0" | $[1-9] )+ $[0-9]* ( "m" | "ms" | "s" | "h" | "d" | "w" ) }
  Int { ("0" | $[1-9])+ $[0-9]* }
  Float { $[0-9]+ Dot? $[0-9]+ }
  Identifier { $[a-zA-Z_]+ $[a-zA-Z_0-9\\]* }
  Operator { ("+"|"-"|"*"|"/"|"=="|"!="|"<"|"<="|">"|">="|"=~"|"!~"|"not"|"AND"|"OR"|"div"|"rem") }

  StringTemplate { "{{" Identifier "}}" }
  String { "'" (!['] | "''" | StringTemplate)* "'" }
  Reference { ('"') ( Identifier | Dot | "[" | "]" )+ ('"') }

  Boolean { "true" | "false" }

  LineComment { ("%") ![\n]* }

  @precedence {
    DEF, kwNode, Macro, UserNode, Dot,  kwLambda, kwExpr,
    LineComment,
    Int,
    Float,
    Identifier,
    Boolean,
    Duration,
    Operator,
    Reference,
    String}

  space { $[ \t\n\r]+ }


}

@detectDelim
